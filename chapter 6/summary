第六章 广度优先搜索

一、图
  图由节点和边组成。一个节点可能与众多节点直接相连，这些节点被称为邻居。

二、广度优先搜索
  解决两类问题：
    1.从节点A出发，存在前往节点B的路径吗？
    2.从节点A出发，前往节点B的哪条路径最短？

  一度关系：
  一度关系是跟本节点直接相连的节点。

  队列：
  队列是一种先进先出（FIFO）的数据结构，而栈是一种后进先出（LIFO）的数据结构。
  队列只有两个操作：入队和出队

  有向图：关系是单向的，带有箭头
  无向图：关系是双向的，不带箭头

三、运行时间
  图的每条边都要检查一遍，每个顶点都要检查一遍。
  所以，广度优先搜索的运行时间为O(人数 + 边数)，
  这通常写作O(V + E)，其中V为顶点（vertice）数，E为边数。

四、小结
  1.广度优先搜索指出是否有从A到B的路径。
  2.如果有，广度优先搜索将找出最短路径。
  3.面临类似于寻找最短路径的问题时，可尝试使用图来建立模型，再使用广度优先搜索来解决问题。
  4.有向图中的边为箭头，箭头的方向指定了关系的方向，例如，rama→adit表示rama欠adit钱。
  5.无向图中的边不带箭头，其中的关系是双向的，例如，ross - rachel表示“ross与rachel约会，而rachel也与ross约会”。
  6.队列是先进先出（FIFO）的。
  7.栈是后进先出（LIFO）的。
  8.你需要按加入顺序检查搜索列表中的人，否则找到的就不是最短路径，因此搜索列表必须是队列。
  9.对于检查过的人，务必不要再去检查，否则可能导致无限循环。